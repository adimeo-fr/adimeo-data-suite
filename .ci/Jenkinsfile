@Library('jenkins-shared-library')_

def adimeo = adimeo()
def app_name = "pdb"
def els_server =  "ads_els_$app_name"

def els_version = "7.17.9"
def mariadb_version = "10.5.21"
def php_version = "8.1.16"
def nginx_version = "1.20.1"

pipeline {
    agent any
    environment {
        APP_SECRET = credentials('APP_SECRET')
        ELASTIC_CREDENTIALS = credentials("${app_name.toUpperCase()}_ELASTIC_CREDENTIALS")
        DB_ROOT_CREDENTIALS = credentials("${app_name.toUpperCase()}_DB_ROOT_CREDENTIALS")
        DB_USER_CREDENTIALS = credentials("${app_name.toUpperCase()}_DB_APP_CREDENTIALS")

    }
  stages {
    stage('Configure the project') {
      steps {
          script {
              adimeo.env('.env')
                  .add('APP_ENV', 'prod')
                  .add('APP_SECRET', "$APP_SECRET")
                  .add('ELASTICSEARCH_SERVER_URL', "$els_server:9200")
                  .add('STAT_ELASTICSEARCH_SERVER_URL', "$els_server:9200")
                  .add('RECO_ELASTICSEARCH_SERVER_URL', "$els_server:9200")
                  .add('ADS_INDEX_NB_SHARDS', "$ADS_INDEX_NB_SHARDS")
                  .add('ADS_INDEX_NB_REPLICAS', "$ADS_INDEX_NB_REPLICAS")
                  .add('ADS_STAT_INDEX_NB_SHARDS', "$ADS_STAT_INDEX_NB_SHARDS")
                  .add('ADS_STAT_INDEX_NB_REPLICAS', "$ADS_STAT_INDEX_NB_REPLICAS")
                  .add('ADS_RECO_INDEX_NB_SHARDS', "$ADS_RECO_INDEX_NB_SHARDS")
                  .add('ADS_RECO_INDEX_NB_REPLICAS', "$ADS_RECO_INDEX_NB_REPLICAS")
                  .add('ADS_API_APPLY_BOOSTING', "$ADS_API_APPLY_BOOSTING")
                  .add('SYNONYMS_DICTIONARIES_PATH', "$SYNONYMS_DICTIONARIES_PATH")
                  .add('COLLECT_STATS', "$COLLECT_STATS")
                  .add('IS_LEGACY', "$IS_LEGACY")
                  .add('MAX_REPLICAS', "$MAX_REPLICAS")
                  .add('ELASTIC_USER', "$ELASTIC_CREDENTIALS_USR")
                  .add('ELASTIC_PWD', "$ELASTIC_CREDENTIALS_PSW")
                  .add('ELASTIC_VERIFY', "$ELASTIC_VERIFY")

                sh "sed -i 's/search_ads:9000/search_ads_php:9000/g' .docker/config/nginx/search.conf"
                sh "sed -i 's/APP_PUBLIC_HOST/${PROJECT_URL}/g' .docker/config/nginx/search.conf"

          }
      }
    }


    stage('Building docker images') {
      steps {
          script {
              dockerPhpImage = docker.build("$app_name/search_ads:els_${els_version}-php_${php_version}", "--build-arg \"PHP_TAG=${php_version}\" -f Dockerfile-php .")
              dockerServerImage = docker.build("$app_name/search_nginx:els_${els_version}-php_${php_version}", "--build-arg \"NGINX_TAG=${nginx_version}\" -f Dockerfile-nginx .")
              dockerElasticImage = docker.build("$app_name/els:${els_version}", "--build-arg \"ELS_TAG=${els_version}\" -f Dockerfile-elasticsearch .")
          }
      }
    }
    stage('Pushing image to Docker Registry') {
      steps {
          script {
              docker.withRegistry("https://${FRAMEWORK_REGISTRY_DOMAIN}", 'docker-registry-credentials') {
                  dockerServerImage.push();
                  dockerPhpImage.push();
                  dockerElasticImage.push();
              }
          }
      }
    }

    stage('Running mariadb Docker on remote Server') {
      steps {
        script {
            def remote = [:]
            remote.name = "${REMOTE_HOST}"
            remote.host = "${REMOTE_HOST}"
            remote.allowAnyHosts = true
            withCredentials([
                sshUserPrivateKey(credentialsId: "symfony-dev2-admin-priv-key", keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'sshUser')
                ]){
                        remote.user = sshUser
                        remote.identityFile = identity
                        sshCommand remote: remote, command: """
                            if ! docker ps --format '{{.Names}}' | grep -w ${app_name}_search_bdd &> /dev/null; then
                                docker run --restart always --name ${app_name}_search_bdd \
                                    -v ${app_name}_mysql_data:/var/lib/mysql \
                                    --network web \
                                    -e MARIADB_ROOT_PASSWORD=$DB_ROOT_CREDENTIALS_PSW \
                                    -e MARIADB_USER=$DB_USER_CREDENTIALS_USR \
                                    -e MARIADB_PASSWORD=$DB_USER_CREDENTIALS_PSW \
                                    -e MARIADB_DATABASE=${app_name} \
                                    -d mariadb:${mariadb_version}
                            fi
                        """
                    }
                }
           }
        }

    stage('Running els Docker on remote Server') {
      steps {
        script {
            def remote = [:]
            remote.name = "${REMOTE_HOST}"
            remote.host = "${REMOTE_HOST}"
            remote.allowAnyHosts = true
            withCredentials([
                sshUserPrivateKey(credentialsId: "symfony-dev2-admin-priv-key", keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'sshUser')
            ]) {
              remote.user = sshUser
              remote.identityFile = identity
              sshCommand remote: remote, command: """
                  if ! docker ps --format '{{.Names}}' | grep -w $els_server &> /dev/null; then
                      docker run -d \
                        --name $els_server \
                        -p 9200:9200 \
                        -p 9300:9300 \
                        -e "ELASTIC_USERNAME=$ELASTIC_CREDENTIALS_USR" \
                        -e "ELASTIC_PASSWORD=$ELASTIC_CREDENTIALS_PSW" \
                        -e "ES_JAVA_OPTS=-Xms512m -Xmx512m"\
                        -v search_data:/usr/share/elasticsearch/data \
                        -v search_backup:/usr/share/backup\
                        --network web \
                        ${FRAMEWORK_REGISTRY_DOMAIN}/$app_name/els:${els_version}
                  fi
              """
            }
        }
      }
    }

    stage('Running Docker Server on Remote Server') {
      steps {
        script {
            def remote = [:]
            remote.name = "${REMOTE_HOST}"
            remote.host = "${REMOTE_HOST}"
            remote.allowAnyHosts = true
            withCredentials([
                usernamePassword(credentialsId: 'symfony-registry-auth', passwordVariable: 'password', usernameVariable: 'username'),
                sshUserPrivateKey(credentialsId: "symfony-dev2-admin-priv-key", keyFileVariable: 'identity', passphraseVariable: '', usernameVariable: 'sshUser')
            ]) {
                    remote.user = sshUser
                    remote.identityFile = identity
                    sshCommand remote: remote, command: """
                        docker login -u $username -p $password "https://${FRAMEWORK_REGISTRY_DOMAIN}"

                        docker rm -f search_ads_php 2> /dev/null || true ; \
                        docker pull ${FRAMEWORK_REGISTRY_DOMAIN}/$app_name/search_ads:els_${els_version}-php_${php_version}; \

                        docker run -d \
                          --name search_ads_php \
                          --network web \
                          ${FRAMEWORK_REGISTRY_DOMAIN}/$app_name/search_ads:els_${els_version}-php_${php_version}

                        docker rm -f search_ads_nginx 2> /dev/null || true ; \
                        docker pull ${FRAMEWORK_REGISTRY_DOMAIN}/$app_name/search_nginx:els_${els_version}-php_${php_version}; \
                        docker run -d \
                          --name search_ads_nginx \
                          --label 'traefik.http.routers.${app_name}.rule=Host(`${PROJECT_URL}`)' \
                          --label 'traefik.http.routers.${app_name}-secure.tls=true' \
                          --label 'traefik.http.routers.${app_name}.middlewares=vpnAdimeoIp@file' \
                          --label 'traefik.http.routers.${app_name}.tls.certresolver=lets-encrypt' \
                          --label 'traefik.port-80' \
                          --network web \
                          --link search_ads_php \
                          ${FRAMEWORK_REGISTRY_DOMAIN}/$app_name/search_nginx:els_${els_version}-php_${php_version}
                    """
                }
            }
        }
      }
    }


  post {
        always {
            cleanWs()
        }
    }
}